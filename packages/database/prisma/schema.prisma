generator client {
  provider = "prisma-client-js"
   output   = "../generated/prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id            String   @id
  session_token String   @unique
  expires       DateTime
  user_id       BigInt?
  User          User?    @relation(fields: [user_id], references: [id])
}

model User {
  name                    String
  email                   String
  idcard_number           String    @unique
  bteg_id                 Int       @unique
  phone                   String    @db.VarChar(10)
  org_slug                String?   @db.VarChar(10)
  organization_id         Int       @db.SmallInt
  department_name         String?   @db.VarChar(250)
  heltes_name             String?   @db.VarChar(250)
  position_name           String?   @db.VarChar(400)
  autobus_direction       String?   @db.VarChar(400)
  eelj_date               String?   @db.VarChar(50)
  eelj_id                 Int?
  admin_eelj              Int?
  approved_admin          Int?
  eelj_reason             String?   @db.VarChar(400)
  sms_code                String?   @db.VarChar(20)
  sms_active              DateTime?
  createdAt               DateTime  @default(now())
  approved_zam_tsag       Int       @default(0) @db.SmallInt
  is_done                 Boolean   @default(false)
  zam_tsag                Int       @default(0) @db.SmallInt
  is_should_work          Boolean   @default(false)
  role                    Role      @default(USER)
  register_number         String    @unique @default("")
  group_name              String?   @db.VarChar(250)
  heseg_name              String?   @db.VarChar(250)
  updatedAt               DateTime  @default(now())
  id                      BigInt    @id @default(autoincrement())
  first_name              String?   @db.VarChar(255)
  last_name               String?   @db.VarChar(255)
  ajil_mergejliin_angilal String?   @db.VarChar(255)
  out_date                DateTime? @db.Date
  positionId    String     @db.Uuid  
  position          position?    @relation(fields: [positionId], references: [id])
  Session                 Session[]
}

model clause {
  id               String     @id @default(uuid()) @db.Uuid
  text             String
  referenceNumber String
  sectionId        String     @db.Uuid   
  parentId         String?    @db.Uuid // өөрийгөө зааж байна
  isDeleted        Boolean    @default(false)
  parent           clause?    @relation("ClauseToClause", fields: [parentId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  children         clause[]   @relation("ClauseToClause") // өөрийнхөө олон хүүхдийг заана
  section          section?   @relation(fields: [sectionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  clause_position   clause_position[]
}

model clause_position {
  id         String              @id @default(uuid()) @db.Uuid
  clauseId   String             @db.Uuid
  positionId String             @db.Uuid
  isDeleted  Boolean             @default(false)
  type       type_clause_position?
  clause     clause?             @relation(fields: [clauseId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  position   position?           @relation(fields: [positionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  rating     rating[]
}

model company {
  id                 String       @id @default(uuid()) @db.Uuid
  name               String?      @db.VarChar(255)
  registrationNumber String?      @db.VarChar(255)
  isDeleted        Boolean          @default(false)
  department         department[] //organization_model
}

model department {
  id        String     @id @default(uuid()) @db.Uuid
  name      String?    @db.VarChar(255)
  companyId String?    @db.Uuid
  isDeleted        Boolean          @default(false)
  company   company?   @relation(fields: [companyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  division  division[]
}

model division {
  id           String      @id @default(uuid()) @db.Uuid
  name         String?     @db.VarChar(255)
  departmentId String? @db.Uuid
  isDeleted        Boolean          @default(false)
  department   department? @relation(fields: [departmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  position     position[]
  bteg_id Int?
}

model policy {
  id             String    @id @default(uuid()) @db.Uuid
  name           String?   @db.VarChar(255)
  approvedDate   DateTime? @db.Date
  referenceCode String    @unique @db.VarChar(255)
  isDeleted        Boolean          @default(false)
  section        section[]
}

model position {
  id String @id @default(uuid()) @db.Uuid
  name           String?          @db.VarChar(255)
  clauseId       String?          @db.Uuid
  divisionId     String          @db.Uuid
  isDeleted        Boolean          @default(false)
  clause_position clause_position[]
  User       User[]
  division       division?        @relation(fields: [divisionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  bteg_id Int?
}

model rating {
  id               String          @id @default(uuid()) @db.Uuid
  score            Int
  description      String?
  scored_date       DateTime       @db.Date
  clause_position_id String         @db.Uuid
  isDeleted        Boolean          @default(false)
  rating_session_id String   @db.Uuid
  clause_position   clause_position? @relation(fields: [clause_position_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  rating_session rating_session? @relation(fields: [rating_session_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model section {
  id               String   @id @default(uuid()) @db.Uuid
  policyId         String?  @db.Uuid
  text             String
  referenceNumber String?  @db.VarChar(255)
  isDeleted        Boolean          @default(false)
  clause           clause[]
  policy           policy?  @relation(fields: [policyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model rating_session {
  id String @id @default(uuid()) @db.Uuid
  startDate DateTime @db.Date
  endDate DateTime @db.Date
  name String?
  rating rating[]
}

enum rating_process {
  ACTIVE
  END  
}

enum type_clause_position {
  IMPLEMENTATION
  MONITORING
  VERIFICATION
  DEPLOYMENT
}

enum Role {
  USER
  HR
  ADMIN
  DARGA
  UB
}
