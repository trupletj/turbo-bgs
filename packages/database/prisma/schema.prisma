generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id            String   @id
  session_token String   @unique
  expires       DateTime
  user_id       BigInt?
}

model organization {
  id           String         @id @db.Uuid
  bteg_id      String         @unique
  name         String
  sub_title    String?
  is_hr        Boolean
  is_active    Boolean?
  description  String?
  created_at   DateTime
  alba         alba[]
  gazar        gazar[]
  heltes       heltes[]
  job_position job_position[]
}

model user {
  id              String        @id @default(uuid()) @db.Uuid
  bteg_id         String        @unique
  email           String?
  phone           String?
  idcard_number   String?
  is_active       Boolean?
  address         String?
  register_number String?       @unique
  gazar_id        String?
  alba_id         String?
  heltes_id       String?
  job_position_id String?
  nice_name       String?
  created_at      DateTime?     @default(now())
  updated_at      DateTime?     @updatedAt
  first_name      String?
  last_name       String?
  organization_id String?
  sms_code        String?
  sms_active      DateTime?
  alba            alba?         @relation("alba_ajilchid", fields: [alba_id], references: [bteg_id])
  gazar           gazar?        @relation("gazar_ajilchid", fields: [gazar_id], references: [bteg_id])
  heltes          heltes?       @relation("heltes_ajilchid", fields: [heltes_id], references: [bteg_id])
  job_position    job_position? @relation(fields: [job_position_id], references: [bteg_id])
}

model alba {
  id              String         @id @db.Uuid
  bteg_id         String         @unique
  sub_title       String?
  organization_id String?
  name            String?
  description     String?
  gazar_id        String?
  heltes_id       String?
  is_active       Boolean
  created_at      DateTime
  updated_at      DateTime?
  gazar           gazar?         @relation(fields: [gazar_id], references: [bteg_id])
  heltes          heltes?        @relation(fields: [heltes_id], references: [bteg_id])
  organization    organization?  @relation(fields: [organization_id], references: [bteg_id])
  job_position    job_position[]
  ajilchid        user[]         @relation("alba_ajilchid")
}

model heltes {
  id              String         @id @db.Uuid
  bteg_id         String         @unique
  sub_title       String?
  organization_id String?
  gazar_id        String?
  description     String?
  name            String?
  is_active       Boolean
  updated_at      DateTime?
  created_at      DateTime?
  alba            alba[]
  gazar           gazar?         @relation(fields: [gazar_id], references: [bteg_id])
  organization    organization?  @relation(fields: [organization_id], references: [bteg_id])
  job_position    job_position[]
  ajilchid        user[]         @relation("heltes_ajilchid")
}

model gazar {
  id              String         @id @db.Uuid
  bteg_id         String         @unique
  created_at      DateTime
  updated_at      DateTime?
  is_active       Boolean
  organization_id String
  alba            alba[]
  organization    organization   @relation(fields: [organization_id], references: [bteg_id])
  heltes          heltes[]
  job_position    job_position[]
  ajilchid        user[]         @relation("gazar_ajilchid")
}

model clause {
  id                  String                @id @default(uuid()) @db.Uuid
  text                String
  referenceNumber     String
  sectionId           String                @db.Uuid
  parentId            String?               @db.Uuid
  isDeleted           Boolean               @default(false)
  policyId            String?               @db.Uuid
  clause              clause?               @relation("clauseToclause", fields: [parentId], references: [id], onUpdate: NoAction)
  other_clause        clause[]              @relation("clauseToclause")
  policy              policy?               @relation(fields: [policyId], references: [id])
  section             section               @relation(fields: [sectionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  clause_job_position clause_job_position[]
}

model clause_job_position {
  id             String                    @id @default(uuid()) @db.Uuid
  clauseId       String                    @db.Uuid
  job_positionId String                    @db.Uuid
  type           type_clause_job_position?
  is_checked     Boolean                   @default(false)
  clause         clause                    @relation(fields: [clauseId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  job_position   job_position              @relation(fields: [job_positionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  rating         rating[]
}

model policy {
  id            String    @id @default(uuid()) @db.Uuid
  name          String?   @db.VarChar(255)
  approvedDate  DateTime? @db.Date
  referenceCode String    @unique @db.VarChar(255)
  isDeleted     Boolean   @default(false)
  clause        clause[]
  section       section[]
}

model job_position {
  id                  String                @id @db.Uuid
  bteg_id             String?               @unique
  gazar_id            String?
  alba_id             String?
  heltes_id           String?
  organization_id     String?
  name                String?
  description         String?
  created_at          DateTime
  is_active           Boolean?
  clause_job_position clause_job_position[]
  alba                alba?                 @relation(fields: [alba_id], references: [bteg_id])
  gazar               gazar?                @relation(fields: [gazar_id], references: [bteg_id])
  heltes              heltes?               @relation(fields: [heltes_id], references: [bteg_id])
  organization        organization?         @relation(fields: [organization_id], references: [bteg_id])
  user                user[]
}

model rating {
  id                     String              @id @default(uuid()) @db.Uuid
  score                  Int
  description            String?
  isDeleted              Boolean             @default(false)
  clause_job_position_id String              @db.Uuid
  rating_session_id      String?             @db.Uuid
  scored_date            DateTime            @default(now()) @db.Date
  clause_job_position    clause_job_position @relation(fields: [clause_job_position_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  rating_session         rating_session?     @relation(fields: [rating_session_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model rating_session {
  id             String         @id @db.Uuid
  startDate      DateTime       @db.Date
  endDate        DateTime       @db.Date
  name           String?
  rating_process rating_process
  rating         rating[]
}

model section {
  id              String   @id @default(uuid()) @db.Uuid
  policyId        String?  @db.Uuid
  text            String
  referenceNumber String?  @db.VarChar(255)
  isDeleted       Boolean  @default(false)
  clause          clause[]
  policy          policy?  @relation(fields: [policyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model profile {
  id      String         @id @default(uuid())
  user_id String         @unique
  profile_roles profile_role[] @relation("ProfileToRoles")
}

model permission {
  id         String    @id @default(uuid())
  name       String?
  action    action  @default(READ)
  resource   String?
  path       String[]
  profile_roles profile_role[]
}

model profile_role {
  id         String       @id @default(uuid())
  name       String
  permissions permission[]
  profiles   profile[]    @relation("ProfileToRoles")
}

enum action {
  CREATE
  READ
  UPDATE
  DELETE
}

enum Role {
  USER
  HR
  ADMIN
  DARGA
  UB
}

enum rating_process {
  ACTIVE
  END
}

enum type_clause_job_position {
  IMPLEMENTATION
  MONITORING
  VERIFICATION
  DEPLOYMENT
}
